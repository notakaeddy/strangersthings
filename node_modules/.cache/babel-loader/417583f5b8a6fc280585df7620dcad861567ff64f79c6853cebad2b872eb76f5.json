{"ast":null,"code":"// The sample call from the documentation\n// fetch('https://strangers-things.herokuapp.com/api/COHORT-NAME/posts', {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Authorization': 'Bearer TOKEN_STRING_HERE'\n//   },\n//   body: JSON.stringify({ /* whatever things you need to send to the API */ })\n// })\n\nexport const getPosts = async () => {\n  const url = \"https://strangers-things.herokuapp.com/api/2302-ACC-ET-WEB-PT-D/posts\";\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const json = await response.json();\n  return json;\n};\nexport const createNewPost = async newPost => {\n  const url = \"https://strangers-things.herokuapp.com/api/2302-ACC-ET-WEB-PT-D/posts\";\n  const token = localStorage.getItem(\"token\");\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: {\n        title: newPost.title,\n        description: newPost.description,\n        price: newPost.price,\n        willDeliver: newPost.willDeliver\n      }\n    })\n  }).then(res => res.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n};\nexport const updatePost = async (postToUpdate, postId) => {\n  const url = `https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/posts/${postId}`;\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(postToUpdate)\n  });\n  const json = await response.json();\n  return json;\n};\nexport const deletePost = async postId => {\n  const url = `https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/posts/${postId}`;\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const json = await response.json();\n  return json;\n};\nexport const accountCreation = async (username, password) => {\n  await fetch(\"https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/users/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n    localStorage.setItem(\"token\", result.data.token);\n  }).catch(console.error);\n};\nexport const accountLogin = async (username, password) => {\n  await fetch(\"https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/users/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    localStorage.setItem(\"token\", result.data.token);\n    console.log(result);\n  }).catch(console.error);\n};\nexport const testAuthentication = async () => {\n  const url = \"https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/test/me\";\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const json = await response.json();\n  return json.success;\n};","map":{"version":3,"names":["getPosts","url","token","localStorage","getItem","response","fetch","method","headers","Authorization","json","createNewPost","newPost","res","body","JSON","stringify","post","title","description","price","willDeliver","then","result","console","log","catch","error","updatePost","postToUpdate","postId","deletePost","accountCreation","username","password","user","setItem","data","accountLogin","testAuthentication","success"],"sources":["/Users/edgar_main/Documents/StrangersThings/src/API/index.js"],"sourcesContent":["// The sample call from the documentation\n// fetch('https://strangers-things.herokuapp.com/api/COHORT-NAME/posts', {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Authorization': 'Bearer TOKEN_STRING_HERE'\n//   },\n//   body: JSON.stringify({ /* whatever things you need to send to the API */ })\n// })\n\nexport const getPosts = async () => {\n  const url =\n    \"https://strangers-things.herokuapp.com/api/2302-ACC-ET-WEB-PT-D/posts\";\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  const json = await response.json();\n  return json;\n};\n\nexport const createNewPost = async (newPost) => {\n  const url =\n    \"https://strangers-things.herokuapp.com/api/2302-ACC-ET-WEB-PT-D/posts\";\n  const token = localStorage.getItem(\"token\");\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      post: {\n        title: newPost.title,\n        description: newPost.description,\n        price: newPost.price,\n        willDeliver: newPost.willDeliver,\n      },\n    }),\n  })\n    .then((res) => res.json())\n    .then((result) => {\n      console.log(result);\n    })\n    .catch(console.error);\n};\n\nexport const updatePost = async (postToUpdate, postId) => {\n  const url = `https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/posts/${postId}`;\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(postToUpdate),\n  });\n\n  const json = await response.json();\n  return json;\n};\n\nexport const deletePost = async (postId) => {\n  const url = `https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/posts/${postId}`;\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const json = await response.json();\n  return json;\n};\n\nexport const accountCreation = async (username, password) => {\n  await fetch(\n    \"https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/users/register\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    }\n  )\n    .then((response) => response.json())\n    .then((result) => {\n      console.log(result);\n      localStorage.setItem(\"token\", result.data.token);\n    })\n    .catch(console.error);\n};\n\nexport const accountLogin = async (username, password) => {\n  await fetch(\n    \"https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/users/login\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    }\n  )\n    .then((response) => response.json())\n    .then((result) => {\n      localStorage.setItem(\"token\", result.data.token);\n      console.log(result);\n    })\n    .catch(console.error);\n};\n\nexport const testAuthentication = async () => {\n  const url =\n    \"https://strangers-things.herokuapp.com/api/2112-FTB-ET-WEB-PT/test/me\";\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  const json = await response.json();\n  return json.success;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}